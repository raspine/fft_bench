#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include <complex>
#include <cstring>
#include <iostream>
#include <array>
#include <chrono>

#include "FftWrapper.hpp"
/* #include "common/WikiFft.hpp" */

namespace {
	const size_t FftSize = 2048;
	// reference arrays
	const std::array<float, FftSize> real = {{ 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 0, -1, 0, -1, -1, 0, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 0, -1, 0, -1, -1, 0, 1, -1, 1, 1, 1, 1, -0, -0, -1, 1, 1, 1, -1, -1, -0, -0, 1, -1, 1, 1, 1, 1, -0, -0, -1, 1, 1, 1, -1, -1, -0, -0, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 0, -1, 0, -1, -1, 0, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 1, -1, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0, -1, -0, 1, 0, 0, -1, -1, 0, -1, -0, -1, -0, 0, -1, 1, -0, -1, -0, 1, 0, 0, -1, -1, 0, -1, -0, -1, -0, 0, -1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -1, 0, 1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, -1, 0, 1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, -1, 0, 1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, -1, -1, -1, 1, -1, 1, 0, 0, 1, 1, -1, 1, 1, -1, 0, 0, -1, -1, -1, 1, -1, 1, 0, 0, 1, 1, -1, 1, 1, -1, 0, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 1, -1, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 1, -1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -1, -1, -1, 1, -1, 1, 0, 0, 1, 1, -1, 1, 1, -1, 0, 0, -1, -1, -1, 1, -1, 1, 0, 0, 1, 1, -1, 1, 1, -1, 0, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 1, -1, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 1, -1, 0, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -1, 0, 1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, -1, 0, 1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 1, -1, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 0, 1, 0, 1, -1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 0, 1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, -1, 0, 1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, -1, -1, -1, -1, 1, -1, 1, 0, 0, 1, 1, -1, 1, 1, -1, 0, 0, -1, -1, -1, 1, -1, 1, 0, 0, 1, 1, -1, 1, 1, -1, 0, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 0, -1, 0, -1, -1, 0, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 0, -1, 0, -1, -1, 0, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1}};
	const std::array<float, FftSize> imag = {{ 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, 1, -0, -1, -0, 1, 0, 0, -1, -1, 0, -1, -0, -1, -0, 0, -1, 1, -0, -1, -0, 1, 0, 0, -1, -1, 0, -1, -0, -1, -0, 0, -1, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 0, -1, -0, -1, 0, 1, -1, 0, -0, 1, -0, -1, -0, -1, -1, 0, 0, -1, -0, -1, 0, 1, -1, 0, -0, 1, -0, -1, -0, -1, -1, 0, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -1, -1, -1, 1, -1, 1, 0, -0, 1, 1, -1, 1, 1, -1, 0, -0, -1, -1, -1, 1, -1, 1, 0, -0, 1, 1, -1, 1, 1, -1, 0, -0, -1, -0, 1, -0, -1, 0, -0, -1, 1, 0, 1, -0, 1, -0, -0, -1, -1, -0, 1, -0, -1, 0, -0, -1, 1, 0, 1, -0, 1, -0, -0, -1, 0, -0, 0, 0, 0, 0, 1, 1, -0, 0, 0, 0, -0, -0, 1, 1, 0, -0, 0, 0, 0, 0, 1, 1, -0, 0, 0, 0, -0, -0, 1, 1, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, -1, -0, 1, -0, -1, 0, -0, -1, 1, 0, 1, -0, 1, -0, -0, -1, -1, -0, 1, -0, -1, 0, -0, -1, 1, 0, 1, -0, 1, -0, -0, -1, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 0, 1, 0, -1, -0, -0, 1, 1, -0, 1, 0, 1, 0, -0, 1, -1, 0, 1, 0, -1, -0, -0, 1, 1, -0, 1, 0, 1, 0, -0, 1, -1, -1, -1, 1, -1, 1, 0, -0, 1, 1, -1, 1, 1, -1, 0, -0, -1, -1, -1, 1, -1, 1, 0, -0, 1, 1, -1, 1, 1, -1, 0, -0, 0, -1, -0, -1, 0, 1, -1, 0, -0, 1, -0, -1, -0, -1, -1, 0, 0, -1, -0, -1, 0, 1, -1, 0, -0, 1, -0, -1, -0, -1, -1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, 0, 1, -0, 1, 0, -1, -1, -0, -0, -1, -0, 1, -0, 1, -1, -0, 0, 1, -0, 1, 0, -1, -1, -0, -0, -1, -0, 1, -0, 1, -1, -0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 1, 1, 1, -0, -0, -1, 1, 1, 1, -1, -1, -0, -0, 1, -1, 1, 1, 1, 1, -0, -0, -1, 1, 1, 1, -1, -1, -0, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, 0, 0, 0, -0, 0, -0, 1, -1, -0, -0, 0, -0, -0, 0, 1, -1, 0, 0, 0, -0, 0, -0, 1, -1, -0, -0, 0, -0, -0, 0, 1, -1, 1, -0, -1, -0, 1, 0, 0, -1, -1, 0, -1, -0, -1, -0, 0, -1, 1, -0, -1, -0, 1, 0, 0, -1, -1, 0, -1, -0, -1, -0, 0, -1, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, 1, 1, 0, 0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -1, 0, 1, 0, -1, -0, -0, 1, 1, -0, 1, 0, 1, 0, -0, 1, -1, 0, 1, 0, -1, -0, -0, 1, 1, -0, 1, 0, 1, 0, -0, 1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, 1, 0, -1, 0, 1, -0, 0, 1, -1, -0, -1, 0, -1, 0, 0, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -1, 0, 1, 0, -1, -0, -0, 1, 1, -0, 1, 0, 1, 0, -0, 1, -1, 0, 1, 0, -1, -0, -0, 1, 1, -0, 1, 0, 1, 0, -0, 1, 1, -1, 1, 1, 1, 1, -0, -0, -1, 1, 1, 1, -1, -1, -0, -0, 1, -1, 1, 1, 1, 1, -0, -0, -1, 1, 1, 1, -1, -1, -0, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -1, -1, -1, 1, -1, 1, 0, -0, 1, 1, -1, 1, 1, -1, 0, -0, -1, -1, -1, 1, -1, 1, 0, -0, 1, 1, -1, 1, 1, -1, 0, -0, -1, 0, 1, 0, -1, -0, -0, 1, 1, -0, 1, 0, 1, 0, -0, 1, -1, 0, 1, 0, -1, -0, -0, 1, 1, -0, 1, 0, 1, 0, -0, 1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, 0, -0, -0, -0, -0, -1, -1, 0, -0, -0, -0, 0, 0, -1, -1, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, 1, 0, 1, -0, -1, 1, -0, 0, -1, 0, 1, 0, 1, 1, -0, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, -0, -0, -0, 0, -0, 0, -1, 1, 0, 0, -0, 0, 0, -0, -1, 1, 1, -0, -1, -0, 1, 0, 0, -1, -1, 0, -1, -0, -1, -0, 0, -1, 1, -0, -1, -0, 1, 0, 0, -1, -1, 0, -1, -0, -1, -0, 0, -1, 1, -1, 1, 1, 1, 1, -0, -0, -1, 1, 1, 1, -1, -1, -0, -0, 1, -1, 1, 1, 1, 1, -0, -0, -1, 1, 1, 1, -1, -1, -0, -0, -1, -0, 1, -0, -1, 0, -0, -1, 1, 0, 1, -0, 1, -0, -0, -1, -1, -0, 1, -0, -1, 0, -0, -1, 1, 0, 1, -0, 1, -0, -0, -1, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, 1, 1, 1, -1, 1, -1, -0, 0, -1, -1, 1, -1, -1, 1, -0, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -0, -1, 0, -1, -0, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0 }};
	const float allowedError = 0.00001;

	bool EnablePrint = false; // enable to get printouts

	template <typename T>
	void printComplex(std::complex<T>* val, const std::string& desc) {
		if (EnablePrint) {
			std::cout << desc << std::endl;
			for (int i = 0; i < 10/**/; i++) {
				std::cout << "Re: " << val[i].real() << " Im: " << val[i].imag() << std::endl;
			}
		}
	}

	// create reference symbol in std::complex<float> format
	std::array<std::complex<float>, FftSize> createFloatRef() {
		std::array<std::complex<float>, FftSize> ref;
		for (unsigned i = 0; i < FftSize; i++) {
			ref[i] = {real[i], imag[i]};
		}
		return ref;
	}
}


TEST_CASE( "fftw of prs symbol, float", "[fft]" ) {

	auto ref = createFloatRef();

 	SECTION( "test fft symbol") {
 		std::array<std::complex<float>, FftSize> fftResult;
 		FftWrapper fft(FftProcessor::FFTW);
 		fft.doFftFloat(reinterpret_cast<std::complex<float>*>(&ref[0]), &fftResult[0]);
 		printComplex(&fftResult[0], "float FFT of prs");

 		std::array<std::complex<float>, FftSize> ifftResult;
 		IFftWrapper ifft(FftProcessor::FFTW);
 		ifft.doIfftFloat(&fftResult[0], &ifftResult[0]);
 		printComplex(&ifftResult[0], "IFFT of prs");
 		for (size_t i = 0; i < FftSize; i++) {
 			REQUIRE(Approx(ifftResult[i].real()).margin(allowedError) == ref[i].real());
 			REQUIRE(Approx(ifftResult[i].imag()).margin(allowedError) == ref[i].imag());
 		}
 	}
 }

// // Uncomment #define FIXED_POINT 32 in import/kissfft/kiss_fft.h to run this
// // test (then all other kiss_fft tests will fail)
// TEST_CASE( "kiss_fft of prs symbol, int32_t", "[fft]" ) {

// 	auto ref = createInt32Ref();
// 	printComplex(&ref[0], "Ref symbol");

// 	SECTION( "test fft symbol") {
// 		decltype(ref) fftResult;
// 		std::FftWrapper fft(std::FftProcessor::KISS);
// 		fft.doFftInt32(reinterpret_cast<std::complex<int32_t>*>(&ref[0]), &fftResult[0]);
// 		printComplex(&fftResult[0], "int32_t kiss_fft of prs");

// 		decltype(fftResult) ifftResult;
// 		std::IFftWrapper ifft(std::FftProcessor::KISS);
// 		ifft.doIfftInt32(&fftResult[0], &ifftResult[0]);
// 		printComplex(&ifftResult[0], "ikiss_fft of prs");
// 		for (int i = 0; i < ; i++) {
// 			REQUIRE(Approx(ifftResult[i].re).margin(allowedError) == ref[i].re);
// 			REQUIRE(Approx(ifftResult[i].im).margin(allowedError) == ref[i].im);
// 		}
// 	}
// }


 TEST_CASE( "profiling external fft libs agains Fft2, float", "[profiling]" ) {

	auto ref = createFloatRef();

	EnablePrint = true;

 	/* SECTION( "WikiFft") { */
		/* WikiFft<float, 2048> fft; */
		/* WikiFft<float, 2048> ifft; */

 	/* 	auto start = std::chrono::steady_clock::now(); */
 	/* 	for (int i = 0; i < 1000; i++) { */
 	/* 		fft.transform(&ref[0], 2048); */
 	/* 		ifft.transform(&ref[0], 2048); */
 	/* 	} */
 	/* 	auto end = std::chrono::steady_clock::now(); */
		/* if (EnablePrint) { */
			/* std::cout << "Wiki float took: " << */
				/* std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << */
				/* std::endl; */
		/* } */
 	/* } */

 	SECTION( "kiss_fft") {
 		decltype(ref) fftResult;
 		decltype(fftResult) ifftResult;
 		FftWrapper fft(FftProcessor::KISS);
 		IFftWrapper ifft(FftProcessor::KISS);

 		auto start = std::chrono::steady_clock::now();
 		for (int i = 0; i < 1000; i++) {
 			fft.doFftFloat(reinterpret_cast<std::complex<float>*>(&ref[0]), &fftResult[0]);
 			ifft.doIfftFloat(&fftResult[0], &ifftResult[0]);
 		}
 		auto end = std::chrono::steady_clock::now();
		if (EnablePrint) {
			std::cout << "kiss_fft took: " <<
				std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() <<
				std::endl;
		}

 	}

 	SECTION( "fftw") {
 		decltype(ref) fftResult;
 		decltype(fftResult) ifftResult;
 		FftWrapper fft(FftProcessor::FFTW);
 		IFftWrapper ifft(FftProcessor::FFTW);

 		auto start = std::chrono::steady_clock::now();
 		for (int i = 0; i < 1000; i++) {
 			fft.doFftFloat(reinterpret_cast<std::complex<float>*>(&ref[0]), &fftResult[0]);
 			ifft.doIfftFloat(&fftResult[0], &ifftResult[0]);
 		}
 		auto end = std::chrono::steady_clock::now();
		if (EnablePrint) {
			std::cout << "fftw (with memcpy) took: " <<
				std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() <<
				std::endl;
		}

 	}

 	SECTION( "ffts fft") {
 		decltype(ref) fftResult;
 		decltype(fftResult) ifftResult;
 		FftWrapper fft(FftProcessor::FFTS);
 		IFftWrapper ifft(FftProcessor::FFTS);

 		auto start = std::chrono::steady_clock::now();
 		for (int i = 0; i < 1000; i++) {
 			fft.doFftFloat(reinterpret_cast<std::complex<float>*>(&ref[0]), &fftResult[0]);
 			ifft.doIfftFloat(&fftResult[0], &ifftResult[0]);
 		}
 		auto end = std::chrono::steady_clock::now();
		if (EnablePrint) {
			std::cout << "ffts fft (with memcpy) took: " <<
				std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() <<
				std::endl;
		}

 	}
 }

